module selfstudy1_2
import StdEnv
//________
//func :: Int -> Int
//func num
//| num > 100 = num
//= func (num + 1)
//Start = func ((1+1)+1)
//Start = func -999
//ps: this is a loop, +1 will stop until it bigger than 100

//________________
//addNumbers :: Int Int -> Int
//addNumbers a b
//| b < 0 = addNumbers (a-1) (b+1)
//| b == 0 = a //the stop condition
//= addNumbers (a+1) (b-1)
//Start = addNumbers 1 2
//Start = addNumbers 1 -2

//__________________
//factorial :: Int -> Int //factorial= n!=1x2x3x4...xn阶乘
//factorial x
//| x < 0 = abort "fuck off bruh"//abort = 停止并显示“”Stop this function and show up
//| x == 0 = 1// tell to stop the loop
//= x * factorial (x-1)
//Start = factorial -9

//_______________________
//factorial2 :: Int -> Int
//factorial2 x
//| x < 0 = abort "go away"
//= faux x 1

//faux :: Int Int -> Int
//faux 0 accumulator = accumulator//叠加器
//faux x accumulator = faux (x-1) (accumulator*(x))
//Start = factorial2 4
//fa 4 1 3 1*4
//fa 3 4 2 4*3
//fa 2 12 1 12*2
//fa 1 24 0 24*1
//fa 0 24 = 24

//_____________
//Start = [1,2,3,4]
//Start = [1..100]
//Start = [1,3..100]//tell the list the gap is 3-1,and [1,3,5..100] dont work!
//a = 2
//b = 4
//c = 8
//d = 32
//e = 33
//Start = [a,b..d]
//Start = [a,b,c..d]//dosen't compile
//Start = ["a","c".."z"]//dosen't compile
//Start = [1,2.0..]//dose't compile all should be the same type
//Start = hd [1,2,3,4]// out the list head -> Int
//Start = tl [1,2,3,4]// out the list without the head -> [Int]
//Start = [1:[2..4]]//put a single element in to a list
//Start = [[1..3],[2..4]] ++ [[]]//->[[1,2,3],[2,3,4],[]]
//Start = [[1..3] : [[4..6]]]
//[Int] -> [ Int : [Int] ]
//[[Int]] -> [ [Int] : [[Int]] ]

//_____________________________
//sumList :: [Int] -> Int
//sumList aList
//| isEmpty aList = 0
//= hd aList + sumList (tl aList)
//Start = sumList [1..4]
//Start = sumList [1..4]
//Start = 1 + sumList [2,3,4]
//Start = 1 + 2 + sumList [3,4]
//Start = 1 + 2 + 3 + sumList [4]
//Start = 1 + 2 + 3 + 4 + sumList []
//Start = 1 + 2 + 3 + 4 + 0 = 10

//___________________
//sumList2 :: [Int] -> Int
//sumList2 [] = abort "empty"
//sumList2 [singleton] = singleton//single element
//sumList2 [first:rest] = first + sumList2 rest
//Start = sumList2 [1,2,3,4]
//[1,2,3,4]
//[first:rest]
//[1:[2,3,4]]
//first = 1 rest = [2,3,4]

//_______________________
//doubleList :: [Int] -> [Int]
//doubleList [] = []
//doubleList [first:rest] = [ 2*first : doubleList rest]//: is kind like ++
//Start = doubleList [1,2,3,4]
//[2 * 1] ++ dL [2,3,4]  f = 2 r = [3,4]
//[2*1] ++ [2*2] ++ dL [3,4] f=3 r=[4]
//[2*1] ++ [2*2] ++ [2*3] ++ dL [4] f=4 r=[]
//[2*1] ++ [2*2] ++ [2*3] ++ [2*4] dL []
//[2*1] ++ [2*2] ++ [2*3] ++ [2*4] ++ []
//[2] ++ [4] ++ [6] ++ [8] ++ []
//[2,4,6,8]
